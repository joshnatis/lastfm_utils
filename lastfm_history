#!/usr/bin/env python3

#---------------------------------------------------------------------------
#  Title         : lastfm_history
#  Author        : Josh Natis
#  Description   : Get a user's listening history from Last.fm
#  Repository    : https://github.com/joshnatis/lastfm_utils
#  Setup         : chmod +x lastfm_history
#                  export LASTFM_API_KEY=xxxxxxx
#                      - or just hardcode the API key into the program
#                      - https://www.last.fm/api/account/create
#
#  Usage         : ./lastfm_history
#---------------------------------------------------------------------------

import urllib.request
import json
import time
import sys
import os
import argparse
from collections import defaultdict

LASTFM_API_KEY = os.environ.get('LASTFM_API_KEY')
USER_AGENT = 'curl/7.54.0' # why not lmfao

TAB_WIDTH = 4

def main():
	args = parse_arguments()

	if args.date:
		lastfm_date_history(args)
	else:
		lastfm_history(args)

#  _    _ ______ _      _____  ______ _____   _____
# | |  | |  ____| |    |  __ \|  ____|  __ \ / ____|
# | |__| | |__  | |    | |__) | |__  | |__) | (___
# |  __  |  __| | |    |  ___/|  __| |  _  / \___ \
# | |  | | |____| |____| |    | |____| | \ \ ____) |
# |_|  |_|______|______|_|    |______|_|  \_\_____/

def parse_arguments():
	if LASTFM_API_KEY == None:
		sys.stderr.write("You're missing an API key!\
		\nEither run 'export LASTFM_API_KEY=xxxx' or hardcode it within the program.\
		\nYou can get an API key from https://www.last.fm/api/account/create.\n")
		exit()

	parser = argparse.ArgumentParser()
	parser.add_argument("-d", "--date", action="store_true", help="display tracks organized by date in JSON format")
	parser.add_argument("-p", "--plaintext", action="store_true", help="display date output in plaintext")
	parser.add_argument("-t", "--top", action="store_true", help="display top tracks (rather than recent)")
	parser.add_argument("-w", "--width", type=int, default=4, metavar='W', help="tab width for display")
	parser.add_argument("-l", "--limit", type=int, metavar='L', default=float("inf"), help="limit the number of songs")
	parser.add_argument("-u", "--user", type=str, metavar='USRN', help="lastfm username", required=True)
	args = parser.parse_args()

	if args.date and args.top:
		sys.stderr.write("Last.fm doesn't provide dates along with your top tracks.\
		\nDon't use -d and -t together.\n")
		exit()

	return args

def lastfm_get(username, payload):
	headers = {'user-agent': USER_AGENT}
	url = 'http://ws.audioscrobbler.com/2.0/'

	payload['api_key'] = LASTFM_API_KEY
	payload['user'] = username
	payload['format'] = 'json'

	data = urllib.parse.urlencode(payload).encode("utf-8")
	req = urllib.request.Request(url, headers=headers)
	response = urllib.request.urlopen(req, data=data)
	assert response.getcode() == 200, "ERROR: " + response.getcode()

	response = json.loads(response.read().decode('utf-8'))
	return response

# 27 Oct 2020, 18:53 --> [Oct, 2020]
def parseDate(date):
	date = date.split(' ')
	return (date[1], date[2][:-1])

# {year : {month: {artist : []}}}
def print_scrobbles(scrobbles, tab_width):
	sys.stderr.write("\n")
	for year in scrobbles:
		print(year)
		for month in scrobbles[year]:
			print(" " * tab_width, month)
			for artist in scrobbles[year][month]:
				print(" " * tab_width * 2, artist)
				for title in scrobbles[year][month][artist]:
					print(" " * tab_width * 3, title)

# thanks eusoubrasileiro, https://stackoverflow.com/a/34482761
def progressbar(it, prefix="", width=60, file=sys.stderr):
	count = len(it)
	def show(j):
		x = int(width*j/count)
		file.write("%s[%s%s] %i/%i\r" % (prefix, "#"*x, "."*(width-x), j, count))
		file.flush()
	show(0)
	for i, item in enumerate(it):
		yield item
		show(i+1)
	file.write("\n")
	file.flush()

#           _____ _____
#     /\   |  __ \_   _|
#    /  \  | |__) || |
#   / /\ \ |  ___/ | |
#  / ____ \| |    _| |_
# /_/    \_\_|   |_____|

def lastfm_history(args):
	method = "recenttracks" if not args.top else "toptracks"
	artist_label = "#text" if not args.top else "name"

	num_pages = int(lastfm_get(args.user, {
		'method': "user.get" + method
	})[method]["@attr"]["totalPages"])


	n = 0
	for page in range(1, num_pages + 1):
		try:
			tracks = lastfm_get(args.user, {
				'method': "user.get" + method,
				'page': page
			})[method]['track']
		except:
			break

		for track in tracks:
			n += 1
			print(track["artist"][artist_label], "-", track["name"])
			if n >= args.limit:
				return

def lastfm_date_history(args):
	scrobbles = defaultdict(lambda: defaultdict(dict))

	method = "recenttracks" if not args.top else "toptracks"
	artist_label = "#text" if not args.top else "name"

	num_pages = int(lastfm_get(args.user, {
		'method': 'user.get' + method,
	})[method]["@attr"]["totalPages"])

	class LimitReached(Exception): pass

	n = 0
	try:
		for page in range(1, num_pages + 1):
			try:
				tracks = lastfm_get(args.user, {
					'method': 'user.get' + method,
					'page': page
				})[method]['track']
			except: # unable to fetch content, write what we have and exit
				raise KeyboardInterrupt

			if "@attr" in tracks[0]: #skip now-playing
				tracks = tracks[1:]

			for track in progressbar(tracks, prefix="Scraping: ", width=50):
				n += 1
				artist = track["artist"][artist_label]
				title = track["name"]
				month, year = parseDate(track["date"]["#text"])

				if artist not in scrobbles[year][month]:
					scrobbles[year][month][artist] = []
				scrobbles[year][month][artist].append(title)

				if n >= args.limit: raise LimitReached

			if n % 100 == 0:
				time.sleep(1)

	except KeyboardInterrupt:
		sys.stderr.write("\n")
	except AssertionError as e:
		sys.stderr.write(str(e) + "\nIs your API key invalid?\
		\nOr, perhaps we're querying Last.fm too frequently -- take a break.\n")
	except LimitReached:
		pass #bro this is literally a goto lmfao

	if args.plaintext:
		print_scrobbles(scrobbles, args.width)
	else:
		print(json.dumps(scrobbles, ensure_ascii=False).encode('utf-8').decode())

main()